{"version":3,"sources":["../../../../../../packages/vite/src/executors/test/vitest.impl.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  stripIndents,\n  workspaceRoot,\n} from '@nx/devkit';\nimport { CoverageOptions, File, Reporter } from 'vitest';\nimport { loadConfigFromFile } from 'vite';\nimport { VitestExecutorOptions } from './schema';\nimport { relative, resolve } from 'path';\nimport { existsSync } from 'fs';\nimport { registerTsConfigPaths } from '@nx/js/src/internal';\n\nclass NxReporter implements Reporter {\n  deferred: {\n    promise: Promise<boolean>;\n    resolve: (val: boolean) => void;\n  };\n\n  constructor(private watch: boolean) {\n    this.setupDeferred();\n  }\n\n  async *[Symbol.asyncIterator]() {\n    do {\n      const hasErrors = await this.deferred.promise;\n      yield { hasErrors };\n      this.setupDeferred();\n    } while (this.watch);\n  }\n\n  private setupDeferred() {\n    let resolve: (val: boolean) => void;\n    this.deferred = {\n      promise: new Promise((res) => {\n        resolve = res;\n      }),\n      resolve,\n    };\n  }\n\n  onFinished(files: File[], errors?: unknown[]) {\n    const hasErrors =\n      files.some((f) => f.result?.state === 'fail') || errors?.length > 0;\n    this.deferred.resolve(hasErrors);\n  }\n}\n\nexport async function* vitestExecutor(\n  options: VitestExecutorOptions,\n  context: ExecutorContext\n) {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  registerTsConfigPaths(resolve(projectRoot, 'tsconfig.json'));\n\n  const { startVitest } = await (Function(\n    'return import(\"vitest/node\")'\n  )() as Promise<typeof import('vitest/node')>);\n\n  const nxReporter = new NxReporter(options.watch);\n  const settings = await getSettings(options, context);\n  settings.reporters.push(nxReporter);\n  const cliFilters = options.testFile ? [options.testFile] : [];\n\n  const ctx = await startVitest(options.mode, cliFilters, settings);\n\n  let hasErrors = false;\n\n  const processExit = () => {\n    ctx.exit();\n    if (hasErrors) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n\n  if (options.watch) {\n    process.on('SIGINT', processExit);\n    process.on('SIGTERM', processExit);\n    process.on('exit', processExit);\n  }\n\n  for await (const report of nxReporter) {\n    // vitest sets the exitCode = 1 when code coverage isn't met\n    hasErrors =\n      report.hasErrors || (process.exitCode && process.exitCode !== 0);\n  }\n\n  return {\n    success: !hasErrors,\n  };\n}\n\nasync function getSettings(\n  options: VitestExecutorOptions,\n  context: ExecutorContext\n) {\n  const projectRoot = context.projectGraph.nodes[context.projectName].data.root;\n  const offset = relative(workspaceRoot, context.cwd);\n  // if reportsDirectory is not provided vitest will remove all files in the project root\n  // when coverage is enabled in the vite.config.ts\n  const coverage: CoverageOptions = options.reportsDirectory\n    ? {\n        enabled: options.coverage,\n        reportsDirectory: options.reportsDirectory,\n        provider: 'c8',\n      }\n    : ({} as CoverageOptions);\n\n  const viteConfigPath = options.config\n    ? joinPathFragments(context.root, options.config)\n    : findViteConfig(joinPathFragments(context.root, projectRoot));\n\n  const resolved = await loadConfigFromFile(\n    {\n      mode: options.mode,\n      command: 'serve',\n    },\n    viteConfigPath\n  );\n\n  if (!viteConfigPath || !resolved?.config?.['test']) {\n    logger.warn(stripIndents`Unable to load test config from config file ${\n      resolved?.path ?? viteConfigPath\n    }\nSome settings may not be applied as expected.\nYou can manually set the config in the project, ${\n      context.projectName\n    }, configuration.\n      `);\n  }\n\n  const settings = {\n    ...options,\n    // when running nx from the project root, the root will get appended to the cwd.\n    // creating an invalid path and no tests will be found.\n    // instead if we are not at the root, let the cwd be root.\n    root: offset === '' ? projectRoot : '',\n    reporters: [\n      ...(options.reporters ?? []),\n      ...((resolved?.config?.['test']?.reporters as string[]) ?? []),\n      'default',\n    ] as (string | Reporter)[],\n    coverage: { ...coverage, ...resolved?.config?.['test']?.coverage },\n  };\n\n  return settings;\n}\n\nfunction findViteConfig(projectRootFullPath: string): string {\n  const allowsExt = ['js', 'mjs', 'ts', 'cjs', 'mts', 'cts'];\n\n  for (const ext of allowsExt) {\n    if (\n      existsSync(joinPathFragments(projectRootFullPath, `vite.config.${ext}`))\n    ) {\n      return joinPathFragments(projectRootFullPath, `vite.config.${ext}`);\n    }\n  }\n}\n\nexport default vitestExecutor;\n"],"names":["vitestExecutor","NxReporter","Symbol","asyncIterator","hasErrors","deferred","promise","setupDeferred","watch","resolve","Promise","res","onFinished","files","errors","some","f","result","state","length","constructor","options","context","projectRoot","projectsConfigurations","projects","projectName","root","registerTsConfigPaths","startVitest","Function","nxReporter","settings","getSettings","reporters","push","cliFilters","testFile","ctx","mode","processExit","exit","process","on","report","exitCode","success","resolved","projectGraph","nodes","data","offset","relative","workspaceRoot","cwd","coverage","reportsDirectory","enabled","provider","viteConfigPath","config","joinPathFragments","findViteConfig","loadConfigFromFile","command","logger","warn","stripIndents","path","projectRootFullPath","allowsExt","ext","existsSync"],"mappings":"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"}