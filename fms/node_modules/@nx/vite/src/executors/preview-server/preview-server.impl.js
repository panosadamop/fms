"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    vitePreviewServerExecutor: function() {
        return vitePreviewServerExecutor;
    },
    default: function() {
        return _default;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _vite = require("vite");
const _optionsutils = require("../../utils/options-utils");
async function* vitePreviewServerExecutor(options, context) {
    var _context_projectsConfigurations_projects_target_project;
    const target = (0, _devkit.parseTargetString)(options.buildTarget, context.projectGraph);
    const targetConfiguration = (_context_projectsConfigurations_projects_target_project = context.projectsConfigurations.projects[target.project]) == null ? void 0 : _context_projectsConfigurations_projects_target_project.targets[target.target];
    if (!targetConfiguration) {
        throw new Error(`Invalid buildTarget: ${options.buildTarget}`);
    }
    const isCustomBuildTarget = targetConfiguration.executor !== '@nx/vite:build' && targetConfiguration.executor !== '@nrwl/vite:build';
    // Retrieve the option for the configured buildTarget.
    const buildTargetOptions = (0, _optionsutils.getNxTargetOptions)(options.buildTarget, context);
    var _options_staticFilePath;
    const outputPath = (_options_staticFilePath = options.staticFilePath) != null ? _options_staticFilePath : buildTargetOptions.outputPath;
    if (!outputPath) {
        throw new Error(`Could not infer the "outputPath". It should either be a property of the "${options.buildTarget}" buildTarget or provided explicitly as a "staticFilePath" option.`);
    }
    // Merge the options from the build and preview-serve targets.
    // The latter takes precedence.
    const mergedOptions = _extends._({}, {
        watch: {}
    }, isCustomBuildTarget ? {} : buildTargetOptions, options, {
        outputPath
    });
    // Retrieve the server configuration.
    const serverConfig = (0, _vite.mergeConfig)((0, _optionsutils.getViteSharedConfig)(mergedOptions, options.clearScreen, context), {
        build: (0, _optionsutils.getViteBuildOptions)(mergedOptions, context),
        preview: (0, _optionsutils.getVitePreviewOptions)(mergedOptions, context)
    });
    if (serverConfig.mode === 'production') {
        console.warn('WARNING: preview is not meant to be run in production!');
    }
    let server;
    const processOnExit = async ()=>{
        await closeServer(server);
    };
    process.once('SIGINT', processOnExit);
    process.once('SIGTERM', processOnExit);
    process.once('exit', processOnExit);
    // Launch the build target.
    // If customBuildTarget is set to true, do not provide any overrides to it
    const buildTargetOverrides = isCustomBuildTarget ? {} : mergedOptions;
    const build = await (0, _devkit.runExecutor)(target, buildTargetOverrides, context);
    for await (const result of build){
        if (result.success) {
            try {
                if (!server) {
                    server = await (0, _vite.preview)(serverConfig);
                }
                server.printUrls();
                const resolvedUrls = [
                    ...server.resolvedUrls.local,
                    ...server.resolvedUrls.network
                ];
                var _resolvedUrls_;
                yield {
                    success: true,
                    baseUrl: (_resolvedUrls_ = resolvedUrls[0]) != null ? _resolvedUrls_ : ''
                };
            } catch (e) {
                console.error(e);
                yield {
                    success: false,
                    baseUrl: ''
                };
            }
        } else {
            yield {
                success: false,
                baseUrl: ''
            };
        }
    }
    await new Promise((resolve)=>{
        process.once('SIGINT', ()=>resolve());
        process.once('SIGTERM', ()=>resolve());
        process.once('exit', ()=>resolve());
    });
}
function closeServer(server) {
    return new Promise((resolve)=>{
        if (!server) {
            resolve();
        } else {
            const { httpServer  } = server;
            // closeAllConnections was added in Node v18.2.0
            httpServer.closeAllConnections && httpServer.closeAllConnections();
            httpServer.close(()=>resolve());
        }
    });
}
const _default = vitePreviewServerExecutor;

//# sourceMappingURL=preview-server.impl.js.map