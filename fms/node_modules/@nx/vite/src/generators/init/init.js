"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createVitestConfig: function() {
        return createVitestConfig;
    },
    initGenerator: function() {
        return initGenerator;
    },
    default: function() {
        return _default;
    },
    initSchematic: function() {
        return initSchematic;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _devkit = require("@nx/devkit");
const _js = require("@nx/js");
const _versions = require("../../utils/versions");
function checkDependenciesInstalled(host, schema) {
    const packageJson = (0, _devkit.readJson)(host, 'package.json');
    const devDependencies = {};
    const dependencies = {};
    packageJson.dependencies = packageJson.dependencies || {};
    packageJson.devDependencies = packageJson.devDependencies || {};
    // base deps
    devDependencies['@nx/vite'] = _versions.nxVersion;
    devDependencies['vite'] = _versions.viteVersion;
    devDependencies['vite-plugin-eslint'] = _versions.vitePluginEslintVersion;
    devDependencies['vite-tsconfig-paths'] = _versions.viteTsConfigPathsVersion;
    devDependencies['vitest'] = _versions.vitestVersion;
    devDependencies['@vitest/ui'] = _versions.vitestUiVersion;
    devDependencies['jsdom'] = _versions.jsdomVersion;
    if (schema.uiFramework === 'react') {
        if (schema.compiler === 'swc') {
            devDependencies['@vitejs/plugin-react-swc'] = _versions.vitePluginReactSwcVersion;
        } else {
            devDependencies['@vitejs/plugin-react'] = _versions.vitePluginReactVersion;
        }
    }
    if (schema.includeLib) {
        devDependencies['vite-plugin-dts'] = _versions.vitePluginDtsVersion;
    }
    return (0, _devkit.addDependenciesToPackageJson)(host, dependencies, devDependencies);
}
function moveToDevDependencies(tree) {
    (0, _devkit.updateJson)(tree, 'package.json', (packageJson)=>{
        packageJson.dependencies = packageJson.dependencies || {};
        packageJson.devDependencies = packageJson.devDependencies || {};
        if (packageJson.dependencies['@nx/vite']) {
            packageJson.devDependencies['@nx/vite'] = packageJson.dependencies['@nx/vite'];
            delete packageJson.dependencies['@nx/vite'];
        }
        return packageJson;
    });
}
function createVitestConfig(tree) {
    var _nxJson_namedInputs;
    var _nxJson, _nxJson_targetDefaults, _nxJson_targetDefaults_test;
    const nxJson = (0, _devkit.readNxJson)(tree);
    const productionFileSet = (_nxJson_namedInputs = nxJson.namedInputs) == null ? void 0 : _nxJson_namedInputs.production;
    if (productionFileSet) {
        productionFileSet.push('!{projectRoot}/**/?(*.)+(spec|test).[jt]s?(x)?(.snap)', '!{projectRoot}/tsconfig.spec.json');
        nxJson.namedInputs.production = Array.from(new Set(productionFileSet));
    }
    var _targetDefaults;
    (_targetDefaults = (_nxJson = nxJson).targetDefaults) != null ? _targetDefaults : _nxJson.targetDefaults = {};
    var _test;
    (_test = (_nxJson_targetDefaults = nxJson.targetDefaults).test) != null ? _test : _nxJson_targetDefaults.test = {};
    var _inputs;
    (_inputs = (_nxJson_targetDefaults_test = nxJson.targetDefaults.test).inputs) != null ? _inputs : _nxJson_targetDefaults_test.inputs = [
        'default',
        productionFileSet ? '^production' : '^default'
    ];
    (0, _devkit.updateNxJson)(tree, nxJson);
}
async function initGenerator(tree, schema) {
    moveToDevDependencies(tree);
    createVitestConfig(tree);
    const tasks = [];
    tasks.push(await (0, _js.initGenerator)(tree, _extends._({}, schema, {
        skipFormat: true
    })));
    tasks.push(checkDependenciesInstalled(tree, schema));
    return (0, _devkit.runTasksInSerial)(...tasks);
}
const _default = initGenerator;
const initSchematic = (0, _devkit.convertNxGenerator)(initGenerator);

//# sourceMappingURL=init.js.map