"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    updateReportDirectoryPlaceholders: function() {
        return updateReportDirectoryPlaceholders;
    },
    default: function() {
        return _default;
    }
});
const _devkit = require("@nx/devkit");
const _executoroptionsutils = require("@nx/devkit/src/generators/executor-options-utils");
function updateReportDirectoryPlaceholders(tree) {
    const projects = (0, _devkit.getProjects)(tree);
    (0, _executoroptionsutils.forEachExecutorOptions)(tree, '@nrwl/vite:test', (options, projectName, targetName, configName)=>{
        const projectConfig = projects.get(projectName);
        const coverageOutput = projectConfig.root === '.' ? projectName : projectConfig.root;
        if (options.reportsDirectory) {
            options.reportsDirectory = options.reportsDirectory.replace('{workspaceRoot}/', projectConfig.root === '.' ? '' : (0, _devkit.offsetFromRoot)(projectConfig.root)).replace('{projectRoot}', coverageOutput);
            if (configName) {
                projectConfig.targets[targetName].configurations[configName] = options;
            } else {
                projectConfig.targets[targetName].options = options;
            }
            if (projectConfig.targets[targetName].outputs) {
                projectConfig.targets[targetName].outputs = projectConfig.targets[targetName].outputs.map((output)=>output.replace('{projectRoot}/coverage', `coverage/${coverageOutput}`));
            }
            (0, _devkit.updateProjectConfiguration)(tree, projectName, projectConfig);
        }
    });
}
const _default = updateReportDirectoryPlaceholders;

//# sourceMappingURL=update-report-directory.js.map