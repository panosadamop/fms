"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initSchematic = exports.initGenerator = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const jest_1 = require("@nx/jest");
const js_1 = require("@nx/js");
const versions_1 = require("../../utils/versions");
function updateDependencies(tree) {
    (0, devkit_1.removeDependenciesFromPackageJson)(tree, ['@nx/node'], []);
    return (0, devkit_1.addDependenciesToPackageJson)(tree, {
        tslib: versions_1.tslibVersion,
    }, { '@nx/node': versions_1.nxVersion, '@types/node': versions_1.typesNodeVersion });
}
function normalizeOptions(schema) {
    var _a;
    return Object.assign(Object.assign({}, schema), { unitTestRunner: (_a = schema.unitTestRunner) !== null && _a !== void 0 ? _a : 'jest' });
}
function initGenerator(tree, schema) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const options = normalizeOptions(schema);
        const tasks = [];
        tasks.push(yield (0, js_1.initGenerator)(tree, Object.assign(Object.assign({}, schema), { tsConfigName: schema.rootProject ? 'tsconfig.json' : 'tsconfig.base.json', skipFormat: true })));
        if (options.unitTestRunner === 'jest') {
            tasks.push(yield (0, jest_1.jestInitGenerator)(tree, Object.assign(Object.assign({}, schema), { testEnvironment: 'node' })));
        }
        tasks.push(updateDependencies(tree));
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.initGenerator = initGenerator;
exports.default = initGenerator;
exports.initSchematic = (0, devkit_1.convertNxGenerator)(initGenerator);
