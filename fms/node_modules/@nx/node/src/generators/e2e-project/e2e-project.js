"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.e2eProjectSchematic = exports.e2eProjectGenerator = void 0;
const tslib_1 = require("tslib");
const path = require("path");
const devkit_1 = require("@nx/devkit");
const linter_1 = require("@nx/linter");
const versions_1 = require("../../utils/versions");
const path_1 = require("path");
const global_eslint_config_1 = require("@nx/linter/src/generators/init/global-eslint-config");
function e2eProjectGenerator(host, _options) {
    var _a, _b;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const options = normalizeOptions(host, _options);
        const appProject = (0, devkit_1.readProjectConfiguration)(host, options.project);
        (0, devkit_1.addProjectConfiguration)(host, options.e2eProjectName, {
            root: options.e2eProjectRoot,
            implicitDependencies: [options.project],
            targets: {
                e2e: {
                    executor: '@nx/jest:jest',
                    outputs: ['{workspaceRoot}/coverage/{e2eProjectRoot}'],
                    options: {
                        jestConfig: `${options.e2eProjectRoot}/jest.config.ts`,
                        passWithNoTests: true,
                    },
                },
            },
        });
        if (options.projectType === 'server') {
            (0, devkit_1.generateFiles)(host, path.join(__dirname, 'files/server/common'), options.e2eProjectRoot, Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.rootProject ? 'server' : options.project)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.e2eProjectRoot), tmpl: '' }));
            if (options.isNest) {
                (0, devkit_1.generateFiles)(host, path.join(__dirname, 'files/server/nest'), options.e2eProjectRoot, Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.rootProject ? 'server' : options.project)), { offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.e2eProjectRoot), tmpl: '' }));
            }
        }
        else if (options.projectType === 'cli') {
            const mainFile = (_b = (_a = appProject.targets.build) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.outputPath;
            (0, devkit_1.generateFiles)(host, path.join(__dirname, 'files/cli'), options.e2eProjectRoot, Object.assign(Object.assign(Object.assign({}, options), (0, devkit_1.names)(options.rootProject ? 'cli' : options.project)), { mainFile, offsetFromRoot: (0, devkit_1.offsetFromRoot)(options.e2eProjectRoot), tmpl: '' }));
        }
        // axios is more than likely used in the application code, so install it as a regular dependency.
        const installTask = (0, devkit_1.addDependenciesToPackageJson)(host, { axios: versions_1.axiosVersion }, {});
        tasks.push(installTask);
        if (options.linter === linter_1.Linter.EsLint) {
            const linterTask = yield (0, linter_1.lintProjectGenerator)(host, {
                project: options.e2eProjectName,
                linter: linter_1.Linter.EsLint,
                skipFormat: true,
                tsConfigPaths: [
                    (0, devkit_1.joinPathFragments)(options.e2eProjectRoot, 'tsconfig.json'),
                ],
                eslintFilePatterns: [`${options.e2eProjectRoot}/**/*.{js,ts}`],
                setParserOptionsProject: false,
                skipPackageJson: false,
                rootProject: options.rootProject,
            });
            tasks.push(linterTask);
            (0, devkit_1.updateJson)(host, (0, path_1.join)(options.e2eProjectRoot, '.eslintrc.json'), (json) => {
                if (options.rootProject) {
                    json.plugins = ['@nx'];
                    json.extends = [];
                }
                json.overrides = [
                    ...(options.rootProject
                        ? [global_eslint_config_1.globalTypeScriptOverrides, global_eslint_config_1.globalJavaScriptOverrides]
                        : []),
                    /**
                     * In order to ensure maximum efficiency when typescript-eslint generates TypeScript Programs
                     * behind the scenes during lint runs, we need to make sure the project is configured to use its
                     * own specific tsconfigs, and not fall back to the ones in the root of the workspace.
                     */
                    {
                        files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
                        /**
                         * Having an empty rules object present makes it more obvious to the user where they would
                         * extend things from if they needed to
                         */
                        rules: {},
                    },
                ];
                return json;
            });
        }
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(host);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.e2eProjectGenerator = e2eProjectGenerator;
function normalizeOptions(tree, options) {
    var _a, _b;
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const appsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : (0, devkit_1.getWorkspaceLayout)(tree).appsDir;
    const name = (_a = options.name) !== null && _a !== void 0 ? _a : `${options.project}-e2e`;
    const appDirectory = projectDirectory
        ? `${(0, devkit_1.names)(projectDirectory).fileName}/${(0, devkit_1.names)(name).fileName}`
        : (0, devkit_1.names)(name).fileName;
    const e2eProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');
    const e2eProjectRoot = options.rootProject
        ? 'e2e'
        : (0, devkit_1.joinPathFragments)(appsDir, appDirectory);
    return Object.assign(Object.assign({}, options), { e2eProjectRoot,
        e2eProjectName, port: (_b = options.port) !== null && _b !== void 0 ? _b : 3000, rootProject: !!options.rootProject });
}
exports.default = e2eProjectGenerator;
exports.e2eProjectSchematic = (0, devkit_1.convertNxGenerator)(e2eProjectGenerator);
