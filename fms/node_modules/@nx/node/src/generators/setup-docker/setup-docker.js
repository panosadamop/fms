"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupDockerSchematic = exports.setupDockerGenerator = exports.updateProjectConfig = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
function normalizeOptions(tree, setupOptions) {
    var _a, _b, _c;
    return Object.assign(Object.assign({}, setupOptions), { project: (_a = setupOptions.project) !== null && _a !== void 0 ? _a : (0, devkit_1.readNxJson)(tree).defaultProject, targetName: (_b = setupOptions.targetName) !== null && _b !== void 0 ? _b : 'docker-build', buildTarget: (_c = setupOptions.buildTarget) !== null && _c !== void 0 ? _c : 'build' });
}
function addDocker(tree, options) {
    var _a;
    const project = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    if (!project || !options.targetName) {
        return;
    }
    if (tree.exists((0, devkit_1.joinPathFragments)(project.root, 'DockerFile'))) {
        devkit_1.logger.info(`Skipping setup since a Dockerfile already exists inside ${project.root}`);
    }
    else {
        const outputPath = (_a = project.targets[`${options.buildTarget}`]) === null || _a === void 0 ? void 0 : _a.options.outputPath;
        (0, devkit_1.generateFiles)(tree, (0, devkit_1.joinPathFragments)(__dirname, './files'), project.root, {
            tmpl: '',
            app: project.sourceRoot,
            buildLocation: outputPath,
            project: options.project,
        });
    }
}
function updateProjectConfig(tree, options) {
    let projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
    projectConfig.targets[`${options.targetName}`] = {
        dependsOn: [`${options.buildTarget}`],
        command: `docker build -f ${(0, devkit_1.joinPathFragments)(projectConfig.root, 'Dockerfile')} . -t ${options.project}`,
    };
    (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
}
exports.updateProjectConfig = updateProjectConfig;
function setupDockerGenerator(tree, setupOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const options = normalizeOptions(tree, setupOptions);
        // Should check if the node project exists
        addDocker(tree, options);
        updateProjectConfig(tree, options);
        if (!options.skipFormat) {
            yield (0, devkit_1.formatFiles)(tree);
        }
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.setupDockerGenerator = setupDockerGenerator;
exports.default = setupDockerGenerator;
exports.setupDockerSchematic = (0, devkit_1.convertNxGenerator)(setupDockerGenerator);
