"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNodeApplicationGeneratorOptions = exports.normalizeOptions = void 0;
const devkit_1 = require("@nx/devkit");
const devkit_2 = require("@nx/devkit");
const linter_1 = require("@nx/linter");
function normalizeOptions(tree, options) {
    var _a, _b, _c, _d;
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const appDirectory = projectDirectory
        ? `${(0, devkit_2.names)(projectDirectory).fileName}/${(0, devkit_2.names)(options.name).fileName}`
        : (0, devkit_2.names)(options.name).fileName;
    const appProjectRoot = options.rootProject
        ? '.'
        : (0, devkit_2.joinPathFragments)(layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : (0, devkit_2.getWorkspaceLayout)(tree).appsDir, appDirectory);
    return Object.assign(Object.assign({}, options), { strict: (_a = options.strict) !== null && _a !== void 0 ? _a : false, appProjectRoot, linter: (_b = options.linter) !== null && _b !== void 0 ? _b : linter_1.Linter.EsLint, unitTestRunner: (_c = options.unitTestRunner) !== null && _c !== void 0 ? _c : 'jest', e2eTestRunner: (_d = options.e2eTestRunner) !== null && _d !== void 0 ? _d : 'jest' });
}
exports.normalizeOptions = normalizeOptions;
function toNodeApplicationGeneratorOptions(options) {
    return {
        name: options.name,
        directory: options.directory,
        frontendProject: options.frontendProject,
        linter: options.linter,
        skipFormat: true,
        skipPackageJson: options.skipPackageJson,
        standaloneConfig: options.standaloneConfig,
        tags: options.tags,
        unitTestRunner: options.unitTestRunner,
        e2eTestRunner: options.e2eTestRunner,
        setParserOptionsProject: options.setParserOptionsProject,
        rootProject: options.rootProject,
        bundler: 'webpack',
        isNest: true,
    };
}
exports.toNodeApplicationGeneratorOptions = toNodeApplicationGeneratorOptions;
