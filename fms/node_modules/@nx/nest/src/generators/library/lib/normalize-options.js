"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toJsLibraryGeneratorOptions = exports.normalizeOptions = void 0;
const linter_1 = require("@nx/linter");
const devkit_1 = require("@nx/devkit");
const get_npm_scope_1 = require("@nx/js/src/utils/package-json/get-npm-scope");
function normalizeOptions(tree, options) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const { libsDir: defaultLibsDir } = (0, devkit_1.getWorkspaceLayout)(tree);
    const libsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : defaultLibsDir;
    const name = (0, devkit_1.names)(options.name).fileName;
    const fullProjectDirectory = projectDirectory
        ? `${(0, devkit_1.names)(projectDirectory).fileName}/${name}`
        : name;
    const projectName = fullProjectDirectory.replace(new RegExp('/', 'g'), '-');
    const fileName = options.simpleName ? name : projectName;
    const projectRoot = (0, devkit_1.joinPathFragments)(libsDir, fullProjectDirectory);
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const normalized = Object.assign(Object.assign({}, options), { strict: (_a = options.strict) !== null && _a !== void 0 ? _a : true, controller: (_b = options.controller) !== null && _b !== void 0 ? _b : false, fileName, global: (_c = options.global) !== null && _c !== void 0 ? _c : false, linter: (_d = options.linter) !== null && _d !== void 0 ? _d : linter_1.Linter.EsLint, parsedTags, prefix: (0, get_npm_scope_1.getNpmScope)(tree), projectDirectory: fullProjectDirectory, projectName,
        projectRoot, service: (_e = options.service) !== null && _e !== void 0 ? _e : false, target: (_f = options.target) !== null && _f !== void 0 ? _f : 'es6', testEnvironment: (_g = options.testEnvironment) !== null && _g !== void 0 ? _g : 'node', unitTestRunner: (_h = options.unitTestRunner) !== null && _h !== void 0 ? _h : 'jest', libsDir });
    return normalized;
}
exports.normalizeOptions = normalizeOptions;
function toJsLibraryGeneratorOptions(options) {
    return {
        name: options.name,
        bundler: (options === null || options === void 0 ? void 0 : options.buildable) ? 'tsc' : 'none',
        directory: options.directory,
        importPath: options.importPath,
        linter: options.linter,
        publishable: options.publishable,
        skipFormat: true,
        skipTsConfig: options.skipTsConfig,
        strict: options.strict,
        tags: options.tags,
        testEnvironment: options.testEnvironment,
        unitTestRunner: options.unitTestRunner,
        config: options.standaloneConfig ? 'project' : 'workspace',
        setParserOptionsProject: options.setParserOptionsProject,
    };
}
exports.toJsLibraryGeneratorOptions = toJsLibraryGeneratorOptions;
